data
    schema
     - schemaInfo
     - figures
        - basicFigures
        - actions
        - style

functions
    createSchema
    updateSchemaInfo
    deleteSchema
    updateFigureCoords
    updateFigureStyle

updateFigureCoordsUseCase(figureId, coords) {
    const figure = services.schema.getFigure(figureId);

    const updatedFigure = domain.figure.updateCoords(figure, coords);

    services.schema.updateFigure(updatedFigure);
}

createSchema
    user opens page
    create schema save in local storage (or in specified storage)
    save data in react state

updateSchema
    user updates info
    info changed in react state
    save changes in local storage (or in specified storage) using debounce

deleteSchema
    user deletes schema
    delete changes in local storage (or in specified storage)
    update react state

addFigure
    user adds figure
    update react state
    add figure in local storage (or in specified storage) via debounce

updateFigure
    user updates figure
        component -> userEvent
    update react state
        handleUserEvent -> controller.updateFigure -> useCases.updateFigure -> 
    update figure in local storage (or in specified storage) via debounce

controller.updateFigure (coords)
    validate(coords)
    // validation login

    figure = useCase.updateFigure(coords)

    return figure


global state Schema
Schema {
    id,
    schemaInfo,
    figures
}

put in local state Figure
Figure {
    id,
    basicFigures,
    style,
    actions
}

onMouseMove - update single figure in local state
onMouseUp - update Schema in global state


MIRO - schema drawer